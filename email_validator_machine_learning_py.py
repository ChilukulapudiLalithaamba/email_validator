# -*- coding: utf-8 -*-
"""Email_Validator machine learning.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rO80WPCRNg_tB_t_sbPZ8Uq6pXyA7xzL
"""

import re

def is_valid_email(email):
    # Rule 1: An email address must contain an @ symbol
    if '@' not in email:
        return False

    # Rule 2: The @ symbol cannot be consecutive
    if '@@' in email:
        return False

    # Rule 3: There cannot be more than one @ symbol in an email
    if email.count('@') != 1:
        return False

    # Rule 4: The @ symbol is allowed in between single quotes, but if another one is added, it won't be valid
    if "'@'" in email or "@'" in email:
        return False

    # Rule 5: Validate local part (before @)
    local_part, domain_part = email.split('@')
    if not re.match(r"^[A-Za-z0-9.!#$%&'*+/=?^_`{|}~-]+(\.[A-Za-z0-9.!#$%&'*+/=?^_`{|}~-]+)*$", local_part):
        return False

    # Rule 6: Validate domain part (after @)
    if not re.match(r"^[A-Za-z0-9-]+(\.[A-Za-z0-9-]+)*(\.[A-Za-z]{2,})$", domain_part):
        return False

    # Rule 7: The top-level domain must be a valid top-level domain
    if not re.match(r"^[A-Za-z]{2,}$", domain_part.split('.')[-1]):
        return False

    # Rule 8: The total length of an email address must not exceed 254 characters
    if len(email) > 254:
        return False

    # Rule 9: The @ symbol has to be more than 6 letters from the end of the email
    if len(email) - email.rindex('@') <= 6:
        return False

    # Rule 10: @ symbol is a must
    if '@' not in email:
        return False

    # Rule 11: No spaces between
    if ' ' in email:
        return False

    # Rule 12: The local name may be a maximum of 64 letters long
    if len(local_part) > 64:
        return False

    # Rule 13: Icon characters arenâ€™t allowed
    if any(ord(char) < 33 or ord(char) > 126 for char in email):
        return False

    # Rule 14: Underscore is not allowed in the domain part
    if '_' in domain_part:
        return False

    # Rule 15: Spaces, quotes, and backslashes must be contained by quotes
    if any(char in {' ', '"', "'"} for char in email):
        if not (email.count('"') == 2 or email.count("'") == 2):
            return False

    # Rule 16: Last portion of domain must be at least two characters (e.g., .com)
    if len(domain_part.split('.')[-1]) < 2:
        return False

    # Rule 17: Punctuation marks cannot come consecutively
    if re.search(r'[!#$%&*+./=?^_`{|}~]{2,}', email):
        return False

    # Rule 18: Can't have all punctuation marks
    if all(char in r'[!#$%&*+./=?^_`{|}~]' for char in email):
        return False

    # Rule 19: Must have the full stop separating the local and domain name
    if '.' not in email:
        return False

    # Rule 20: @ sign can't be the first character
    if email[0] == '@':
        return False

    # Rule 21: Hyphens can't be the first or last character
    if '-' in {email[0], email[-1]}:
        return False

    # Rule 22: Normally, capital and lowercase letter versions of email work and are allowed
    # (Assuming case-insensitive matching)
    # Rule 23: Space between " " is allowed
    # Rule 24: Any punctuation can go in quotes
    # Rule 25: IPV4 addresses to be checked
    if re.match(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', domain_part):
        # Additional validation for IPV4 addresses
        return all(0 <= int(octet) <= 255 for octet in domain_part.split('.'))

    return True

def validate_emails_from_file(file_path):
    with open(file_path, 'r') as file:
        for line in file:
            email = line.strip()
            if is_valid_email(email):
                print(f" **Valid**---The email address '{email}'.")
            else:
                print(f"**Invalid**----The email address '{email}'.")

# Get the file path from the user
file_path = input("Enter the path to the file containing email addresses:  ")

# Validate emails from the file
validate_emails_from_file(file_path)